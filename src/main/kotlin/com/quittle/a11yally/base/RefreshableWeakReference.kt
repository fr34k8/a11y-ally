package com.quittle.a11yally.base

import java.lang.ref.WeakReference

/**
 * Wrapper around a WeakReference with a generator function to lazily recalculate it when required.
 */
class RefreshableWeakReference<T>(initialValue: T?, private val mRefresh: () -> T) {
    constructor(refresh: () -> T) : this(null, refresh)

    private var reference: WeakReference<T> = WeakReference(initialValue)

    /**
     * Returns an instance of T. This may be the initial value if passed in during construction or
     * an instance generated by [mRefresh] if previously garbage collected.
     */
    fun get(): T {
        var value = reference.get()
        if (value.isNotNull()) {
            return value
        }

        value = mRefresh()
        reference = WeakReference(value)
        return value
    }
}
